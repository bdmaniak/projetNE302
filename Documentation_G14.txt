/*************************************************************************************************************************************************************************************
* 										Documentation des Étapes 3 et 4 : Projet NE302 2018 - 2019 ; Groupe 14 ; MENCHERO - GIRET - ROUQUIER										 *
*************************************************************************************************************************************************************************************/



 ___________________________________________________________________________________________________________________________________________________________________________________
|																																													|
|																		Structures de données :																						|
|___________________________________________________________________________________________________________________________________________________________________________________|


PARTIE PARSEUR :

	-> Structure de l'arbre de recherche ; Structure "noeud" composée de :
		- Un pointeur vers un noeud "fils" de ce noeud (peut être nul)
		- Un pointeur vers un noeud "frère" de ce noeud (peut être nul également)
			_ Les frères forment une sorte de liste chaînée utilisée pour la recherche.
		- Une chaine de caractères "nomChamp" contenant le nom du champ représenté par le noeud courant
		- Une chaine de caractères "valeurChamp" contenant la valeur du champ représenté par le noeud courant
	
	-> Structure de lecture de chaine de caractères dans un fichier ; Structure "string" composée de :
		- Un pointeur vers le fichier ouvert en lecture
		- Un entier balisant le début de la chaine de caractères courante dans le fichier
		- La taille de la chaine de caractères courante


PARTIE SERVEUR :

	-> Structure des headers ; Structure enTete composé des chaînes de caractères suivantes :
		- contentEncoding	: Type d'encodage du contenu
		- contentLanguage	: Langue du contenu (pour nous français)
		- contentLength		: Taille en octets du contenu
		- contentType		: Type du contenu (<image, texte, application, ...> / <extension>)
		- date				: Date de création du paquet (Nom du Jour, Numéro du Jour, Nom du Mois, Année, Heure, Minute, Seconde)
		- expires			: Date d'expiration du contenu
		- forwarded			: Indique si le paquet a été retransmis ou non
		- location			: Donne la référence de l'URI source
		- server			: Donne le nom du serveur communiquant

Nous avons pris le parti dans ce projet de partir sur une approche utilisant beaucoup de fichiers. Par exemple, la vérification sémantique se fait directement à partir du fichier 
grammaire.txt. 
Nous utilisons ainsi le parseur créé précédemment pour obtenir une première vérification sémantique. Ensuite, nous vérifions la syntaxe de la requête à l'intérieur même du serveur.



 ___________________________________________________________________________________________________________________________________________________________________________________
|																																													|
|																		Fonctions du parseur :																						|
|___________________________________________________________________________________________________________________________________________________________________________________|


api.h :

IMPORTANT:	Nous avons remplacé void *getRootTree() par void *getRootTree car sans argument on ne peut pas faire grand chose et la deuxième formulation est plus adaptée pour pointer
			vers un élément de l'arbre

	-> void *getRootTree;
		- Pointeur de type opaque vers la racine de l'arbre de recherche

	-> _Token *searchTree(void *start,char *name);
		- Fonction qui recherche dans l'arbre tous les noeuds dont l'etiquette est égale à la chaine de caractères en argument.
		- Par convention si start == NULL alors on commence à la racine
		- Sinon on effectue une recherche dans le sous-arbre à partir du noeud start

	-> char *getElementTag(void *node,int *len);
		- Fonction renvoyant un pointeur vers char indiquant l'étiquette du noeud, c'est à dire le nom de la rulename et si celui-ci est intermediaire ou terminal,
		et indique dans *len la longueur de cette chaine si le pointeur "*len" est non NULL

	-> char *getElementValue(void *node,int *len);
		- Fonction qui renvoie un pointeur vers char indiquant la valeur du noeud, soit la partie correspondnant à la rulename dans la requete HTTP,
		et indique si len est non NULL dans *len la longueur de cette chaine.

	-> void purgeElement(_Token **r);
		- Fonction qui supprime et libère la mémoire de la liste chainée de réponse.

	-> void purgeTree(void *root); 
		- Normalement void*, mais changée pour plus de facilité
		- Fonction qui supprime et libère toute la mémoire associée à l'arbre

	-> int parseur(char *req, int len);
		- L'appel au parseur sur une chaine de caractères de longueur "len"


lecture.h :

	-> char lire (FILE *lu, int indice);
		- Permet de lire le indice-ième caractère du fichier pointé par "lu"

	-> int rechercheMot(char *mot, FILE *fic);
		- Retourne la ligne de grammaire.txt correspondant à la définition du mot-clé "mot"


	-> int rechercheString(string *mot, FILE *fic);
		- Retourne la ligne de grammaire.txt correspondant à la définition de la chaine de caractères "mot"

	-> int pointeurLigne (FILE *fic, int n);
		- Permet de retourner l'indice correspondant à la n-ième ligne du fichier

	-> string *recupereMot (int ligne, int n, FILE *fic);
		- Permet de stocker le n-ième mot de la ligne-ième ligne dans une structure string

	-> char recupChar (string *chaine, int n);
		- Permet de récupérer le n-ième char de la structure string "chaine"

	-> int compareChaineStr (string *s1, char *chaine);
		- Compare un élément de type string avec un char* (comme strcmp)

	-> int compareString(string *s1, string *s2);
		- Compare deux structures string entre elles (comme strcmp)

	-> void afficherString(string *chaine);
		- Affiche un élément de type string

	-> char *convString(string *chaine);
		- Convertit une structure string en chaine de caractères

	-> int IndiceDernierElement(int ligne, FILE *grammaire);
		- Retourne la position du dernier mot sur une ligne du fichier "grammaire" (Sera utile pour creerArbre)

	-> void afficherArbreBasic(noeud *n1);
		- Fonction simple permettant d'afficher une partie de l'arbre

	-> void afficherArbre(noeud *n1);
		- Affiche l'arbre en partant du noeud "n1"
		

grammaire.h :

	-> noeud *creerNoeud(string *s1, string *s2);
		- Crée un noeud avec comme nomChamp "s1" et comme valeurChamp "s2"

	-> void ajouteFils(noeud *n1, noeud *n2);
		- Ajoute un noeud fils "n2" à un noeud "n1". "n1" sera le noeud "père" de "n2".

	-> void ajouteFrere(noeud *n1, noeud *n2);
		- Ajoute un noeud frère "n2" à un noeud "n1", qui correspondra à son "grand frère"

	-> int tailleNoeud (noeud *n1);
		- Permet de déterminer la taille d'un noeud. Cette taille correspond à la somme des tailles de ses fils

	-> string *creerString(FILE *fic, int start, int size);
		- Permet d'insérer un élément de la grammaire dans une structure string à partir d'un curseur et d'une taille en paramètre

	-> noeud *etoile(FILE* grammaire, FILE* lu, int *indice, int ligne, int i, int j , int borne1, int borne2);
		- Cette fonction permet de créer le sous-arbre représentant l'opérateur "*" dans la grammaire

	-> noeud *SP (FILE *grammaire, FILE *lu, int *indice);
		- Crée un noeud si la grammaire signale un espace ET que le caractère lu dans le fichier lu est un espace
		- Renvoie NULL sinon

	-> noeud *HTAB (FILE *grammaire, FILE *lu, int *indice);
		- Même principe que SP avec une tabulation HTAB

	-> noeud *DIGIT (FILE *grammaire, FILE *lu, int *indice);
		- Même principe que SP et HTAB avec un nombre entre 0 et 9

	-> noeud *ALPHA (FILE *grammaire, FILE *lu, int *indice);
		- Même principe que SP, HTAB et DIGIT avec une lettre

	-> noeud *caseInsensitive (FILE *grammaire, FILE *lu, int *indice, string *element);
		- Même principe, le noeud est créé s'il y a un mot entre guillemet dans grammaire.txt, et si ce mot est présent dans le fichier lu

	-> noeud *CRLF (FILE *grammaire, FILE *lu, int *indice);
		- Même chose avec "\r\n"

	-> char convAscii (char hexa[3]);
		- Permet de convertir une chaine de deux char representant un octet hexadecimal en un caractere ASCII(char)

	-> noeud *valAscii (FILE *grammaire, FILE *lu, int *indice, string *element);
		- Cas de base qui gère les éléments de grammaire.txt avec des % suivis de valeurs hexadecimales

	-> noeud *creerArbre(FILE *grammaire, FILE *lu, int *indice, int ligne, int i, int j);
		- Base du parseur
		- Grosse fonction récursive qui crée l'arbre en parcourant grammaire.txt ainsi que la requête en utilisant les fonctions précédentes

	-> CAS DE BASE:
		- On compare les elements de grammaire.txt avec les éléments lus dans la requête pour s'assurer que la requête est correcte.
		- On construit les feuilles de l'arbre au passage, qui seront reliées aux noeuds parents de manière recursive.


 ___________________________________________________________________________________________________________________________________________________________________________________
|																																													|
|																		Fonctions du serveur :																						|
|___________________________________________________________________________________________________________________________________________________________________________________|


	-> void init(char *chaine, int taille);
		- Sert à initialiser une chaîne de caractères à une suite de caractères 'EOF' (fin de fichier)
	
	-> void init_buf(char *chaine);
		- Sert à initialiser le buffer donné, de taille MAX_SIZE + 1
	
	-> char *dotSegmentRemoval(char *chaine);
		- Sert à éviter de remonter dans l'arborescence de fichiers locaux avec ".." ; "../" ; "/" pour fermer une potentielle faille de sécurité. On ne veut pas que quelqu'un aille
		modifier des fichiers à la source du serveur ou qu'il puisse télécharger n'importe quel fichier du serveur.
		
	-> char * percentEncoding(char *chaine);
		- Permet de décoder les parties de requêtes du serveur encodée en code ASCII à l'aide de signes % (par exemple %41 = A).
		
	-> char * referenceTarget (void *root);
		- Recherche la ressource demandée dans l'arborescence donnée. Initie l'envoi d'une erreur 404 si la ressource n'est pas trouvée.
		
	-> void reponseServeur(int code, enTete *et1, char * msgBody, message *requeteRecu, int taille);
		- Répond au client par un message composé :
			_ Du code de la réponse envoyée (404, 200, 501, ...)
			_ De l'en-tête e1 approprié
			_ Du corps de message msgBody si nécessaire
			_ La taille du corps de message
			
	-> void initEnTete(enTete *et1);
		- Initialise tous les champs de l'en-tête et1 à NULL
		
	-> void ajouterHeure(enTete *et1);
		- Remplit le champ date de et1 avec la date et l'heure actuelles
		
	-> int verification();
		- Vérifie la validité de la requête, et initie l'envoi d'une erreur 400 (requête fausse) dans les cas suivants :
			_ Si des champs incompatibles sont remplis
			_ Si on est en HTTP 1.0 et que le champ Host est vide (en 1.0 c'est accepté)
			_ Si la version HTTP n'est ni 1.0 ni 1.1 (Version non supportée)
			_ Si plus d'un champ Host se trouvent dans le message
			
		- Cette fonction renvoie 1 si une erreur a été détectée et 0 si la requête est correcte
	
	-> int min(int a, int b);
		- Renvoie le minimum entre deux entiers. Utilitaire
		
	-> void contentType(char * chaineComplete, int mLen, enTete * et1);
		- Longue liste de if permettant de détecter le format d'un fichier demandé à partir de son extension
		- Formats supportés : 
			_ Images 		: png, jpg/jpeg, gif, tiff
			_ Texte 		: css, html, txt
			_ Application	: json, pdf



 ___________________________________________________________________________________________________________________________________________________________________________________
|																																													|
|																	Fonctionnement du main :																						|
|___________________________________________________________________________________________________________________________________________________________________________________|

	- On alloue de la mémoire pour la structure d'en-têtes, puis le serveur se place en attente dans une boucle infinie. Dès qu'il reçoit une requête, il commence le traitement.

	- Le programme vérifie d'abord la syntaxe de la requête avec le parseur de l'étape 2. Puis il utilise la fonction verification pour vérifier la validité des en-têtes.

	- Toute erreur dans ces tests conduit à l'envoi d'une réponse contenant le code d'erreur 400 : Requête fausse (Bad Request).

	- Nous arrivons maintenant à l'endroit du programme où sont traitées les requêtes syntaxiquement correctes. On sépare par conséquent les différentes requêtes.

	- Si la requête est de type GET, on commence par essayer de reconnaître le type du fichier demandé, avec la fonction contentType. Si on ne reconnaît pas le type, on l'envoie
	sous la forme d'un bit-stream générique (cela a pour effet de télécharger la ressource quand testé sur le navigateur).

	- Si le fichier demandé ne peut pas être retrouvé, on envoie une erreur 404 (introuvable). Sinon on renvoie le fichier avec le code 200 (succès).

	- Si la requête est de type HEAD, on procède de manière similaire, mais on n'envoie pas le fichier, juste les en-têtes du message qu'on aurait envoyé si la requête avait été
	de type GET.

	- Si la requête est de type POST, /******< À COMPLÉTER >*********/

	- Dans le cas d'un autre type de requête, on répond avec un message 501 Non Implémenté (not implemented).

	- On libère ensuite la mémoire utilisée et on attend la requête suivante.

	- On ignore les signaux SIGPIPE (Broken Pipe), car ceux-ci sont générés lorsqu'une connexion est brutalement interrompue et ont pour effet de fermer le serveur. Cela n'a pas 
	d'incidence sur le comportement du serveur même, car lorsqu'une connexion est rompue aucune réponse n'est à renvoyer, et si le client renvoie une requête correcte celle-ci
	sera tout de même traîtée. Cela élimine la fermeture inopinée du serveur si on tente de recharger une page déjà en cours de chargement par le serveur.


